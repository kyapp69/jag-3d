#include <stdio.h>
#include <time.h>
#include <Chaskii/Mem/ref_ptr.h>
#include <tr1/memory>

#include "reps.h"

#define MEASURE_REFERENCES 0

static int n_constructs = 0;
static int n_destructs = 0;

double tick()
{
    struct timespec ts;
    clock_gettime( CLOCK_MONOTONIC, &ts );
    return double(ts.tv_sec) + double(ts.tv_nsec)/(1e9);
}

class Thing
{
    public:
        Thing() { n_constructs++; }
        ~Thing() { n_destructs++; }
};

int main( int argc, char **argv )
{
    double t0, t1;

    t0 = tick();

#ifdef MEASURE_REFERENCES
#ifdef USE_CHASKII_MEM_REF_PTR
    iiMem::ref_ptr<Thing> refs[nrefs];
#endif

#ifdef USE_STD_SHARED_PTR
    std::tr1::shared_ptr<Thing> refs[nrefs];
#endif
#endif

    for( unsigned int i = 0; i < nreps; i++ )
    {
        {
#ifdef USE_CHASKII_MEM_REF_PTR
            iiMem::ref_ptr<Thing> t = new Thing;
#endif
#ifdef USE_STD_SHARED_PTR
            std::tr1::shared_ptr<Thing> t(new Thing);
#endif

#ifdef MEASURE_REFERENCES
            for( unsigned int j = 0; j < nrefs; j++ )
            {
#ifdef USE_CHASKII_MEM_REF_PTR
                refs[j] = t;
#endif
#ifdef USE_STD_SHARED_PTR
                refs[j] = std::tr1::shared_ptr<Thing>(t);
#endif
            }
#endif


#ifdef MEASURE_REFERENCES
            for( unsigned int j = 0; j < nrefs; j++ )
            {
#ifdef USE_CHASKII_MEM_REF_PTR
                refs[j] = 0;
#endif
#ifdef USE_STD_SHARED_PTR
                refs[j].reset();
#endif
            }
#endif
        }
    }

    t1 = tick();

    printf("%lf\n", t1 - t0 );
    printf("num constructs: %d\n", n_constructs );
    printf(" num destructs: %d\n", n_destructs );
}
